#!/usr/bin/perl -wT

use strict;
use CGI;
use Data::Dumper;
use List::Util 'shuffle';
use POSIX;
use XML::Simple;

my $xml = new XML::Simple;

###########################################################
# Yes, this is sloppy. I am aware, but it's also unique.
# Unique, Ubiquitous Singletons.

our $q = CGI->new;
our $xml_data = $xml->XMLin(   "../data.xml", ForceContent => 1, ForceArray  =>[]  );
our $seed=set_seed();
srand $seed;
# This is our city object- it can and will be exported to xml eventually, so keep it clean.
our $city={'seed'=>$seed};

#TODO break out crime/law enforcement into it's own section
#imprisonment rates can range from 0.7% US to 0.1%
#TODO look into passing rand_from_array a pointer.

#########################################################################
# First thing we need to do is establish a city skeleton of information,
# then fill it in as needed by each subsection of the sample text.
#########################################################################
build_city();


#########################################################################
# Now that $city is fleshed out, we can print it..
#########################################################################
print $q->header;
print describe_city();
#########################################################################
#########################################################################
#########################################################################
#########################################################################

sub build_city {
    $city={'seed'=>$seed};
    
    #Steps for generating a random city
    # - Generate a size
    set_city_size();

    # - Generate a type
    set_city_type();

    # - Generate a name
    generate_city_name();

    # - Generate a pop_type
    generate_pop_type();

    # - Generate pop counts
    generate_pop_counts();

    # - Generate assign races
    assign_races();

    # - Generate ethics
    generate_city_ethics();

    # - generate gov't type
    set_govt_type();

    # - generate secondary powers
    generate_secondary_power();

    # - generate location
    set_location();

    # - generate weather
    set_weather();

    # - generate time
    set_time();

    # - generate laws
    set_laws();

    # - generate events
    generate_events();

    # - generate blackmarkets
    generate_markets();

    # - generate street condition
    generate_streets();

    # - generate buildings
    generate_buildings();

    # - Generate Districts
    generate_districts();
    
# TODO
# - taverns
# - generate religions(weighted by race)
# - generate map
}

#################################
#
# Find the size of the city by selecting it from the citysize list,
# Then populate the size, gp limit, population, and size modifier.
#
#################################
sub set_city_size {
    my $roll = &d(100);
    my $citysizelist=$xml_data->{'citysize'}->{'city'} ;
    my $citysize = roll_from_array( $roll, $citysizelist );

    $city->{'size'}          = $citysize->{'size'};
    $city->{'gplimit'}       = $citysize->{'gplimit'};
    $city->{'population'}    = $citysize->{'minpop'} + &d( $citysize->{'maxpop'} - $citysize->{'minpop'} );
    $city->{'size_modifier'} = $citysize->{'size_modifier'};
} ## end sub set_city_size


#################################
#
# Find the type of city by selecting it from the citytype list,
# Then populate the base population, type, description and whether 
# or not it's a mixed city.
#
#################################
sub set_city_type {
    my $roll = &d(100);
    my $citytypelist=$xml_data->{'citytype'}->{'city'};
    my $citytype = roll_from_array( $roll, $citytypelist );

    $city->{'base_pop'}    = $citytype->{'base_pop'};
    $city->{'type'}        = $citytype->{'type'};
    $city->{'description'} = $citytype->{'content'};
    $city->{'add_other'}   = $citytype->{'add_other'};
} ## end sub set_city_type


#####################################################
#
# Generate a City Name. This consists of the prefix,
# the root, the suffix and the trailer.
#
#####################################################
sub generate_city_name {

    for my $partname (qw( prefix root suffix trailer )) {
        my $part = $xml_data->{$partname};

        # If chance is undefined or chance is greater than d100, add the part.
        if ( !defined $part->{'chance'} or $part->{'chance'} > &d(100) ) {
            $city->{'name'}.= rand_from_array( @{$part->{'word'}} )->{'content'};
        }
    }
} ## end sub generate_city_name


#####################################################
#
# Generate a Population Type, then populate
# the population type, population density, and 
# a list of unassigned race percentages.
#
#####################################################
sub generate_pop_type {
    my $roll = &d(100);
    my $poptype     = roll_from_array( $roll, $xml_data->{'poptypes'}->{'population'} );
    my $popdensity  = rand_from_array( @{$xml_data->{'popdensity'}->{'option'} });

    $city->{'poptype'}      = $poptype->{'type'};
    $city->{'popdensity'}   = $popdensity;
    $city->{'races'}        = $poptype->{'option'};
} ## end sub generate_pop_type


#####################################################
#
# Generate Population Counts for each race percentage.
# After getting population counts, recalulate total
# population, then final percentages.
#
#####################################################
sub generate_pop_counts {
    my $roll       = &d(100);
    my $population = $city->{'population'};
    my $newpop     = 0;
    my @races;
    my @newraces;

    # Loop through each race percentage, and get a rough count based
    # on population total
    for my $race ( sort @{ $city->{'races'} } ) {
        $race->{'count'} = ceil( $population * $race->{'percent'} / 100 );
        $newpop += $race->{'count'};
        push @races, $race;
    }

    # Add up all of the rough counts to create a final population total
    $city->{'population'} = $newpop;
    $city->{'races'}      = \@races;

    # Loop through the races a second time, recalulating percentages.
    for my $race ( sort @{ $city->{'races'} } ) {
        $race->{'percent'} = int( $race->{'count'} / $newpop * 1000 ) / 10;
        push @newraces, $race;
    }
    $city->{'races'} = \@newraces;
} ## end sub generate_pop_counts


#####################################################
#
# Assign races. This consists of 
#   * looking at the base population type to gather 
#     available races 
#   * looping through the city race percentages and 
#     assigning an available race
#   * adding an "off race" if applicable.
#
#####################################################
sub assign_races {
    my $base_pop        = $city->{'base_pop'};
    my @available_races = get_races($base_pop);

    my @races;
    # for each race percentage on the city,
    # add assign a race and add it to the list.
    for my $racepercentage ( @{ $city->{'races'} } ) {
        my $newrace = pop(@available_races);
        push @races, add_race_features( $racepercentage, $newrace );
    }
    # If the base_pop has an "off" race, add it.
    if ( $city->{'add_other'} eq 'true' ) {
        my $newrace              = get_other_race($base_pop);
        my $replace_race_id      = &d( scalar @races ) - 1;
        $races[$replace_race_id] = add_race_features( $races[$replace_race_id], $newrace );
    }
    #replace race percentages with full race breakdowns.
    $city->{'races'} = \@races;
} ## end sub assign_races


#####################################################
#
# Generate City Ethics - This was originally intended
# for morals and order (classic alignment), but I've 
# expanded it to include other scales, such as 
# determining if the city is a trade hub, etc. 
# TODO: Why are the other scales no 1-100?
#
#####################################################
sub generate_city_ethics {
    $city->{'moral'} = &d(100);
    $city->{'order'} = &d(100);

    foreach my $scale (qw/ magic authority economy education travel / ){
        $city->{$scale}    =&d(4)-2;
    }

    for my $race ( @{ $city->{'races'} } ) {
        $city->{'moral'} += $race->{'moral'};
        $city->{'order'} += $race->{'order'};
        foreach my $scale (qw/ magic authority economy education travel / ){
            $city->{$scale} += $race->{$scale};
        }
    }
    if ( $city->{'moral'} <   1 )    { $city->{'moral'} =   1; }
    if ( $city->{'moral'} > 100 )    { $city->{'moral'} = 100; }
    if ( $city->{'order'} <   1 )    { $city->{'order'} =   1; }
    if ( $city->{'order'} > 100 )    { $city->{'order'} = 100; }

    foreach my $scale (qw/ magic authority economy education travel / ){
        if ( $city->{$scale}     < -5 ) { $city->{$scale}      = -5; }
        if ( $city->{$scale}     >  5 ) { $city->{$scale}      =  5; }
    }

} ## end sub generate_city_ethics


#####################################################
#
# set Government Type - fairly simple, just
# select a type of govt from the list.
#
#####################################################
sub set_govt_type {
    my $govttypelist=$xml_data->{'govtypes'}->{'govt'} ;
    $city->{'govtype'} = rand_from_array( @{ $govttypelist } );
}


#####################################################
#
# Generate Secondary Power - select a plot, a power
# and a subplot.
#
#####################################################
sub generate_secondary_power {
    $city->{'secondarypower'}={};

    # select a plot
    my $plotlist=$xml_data->{'secondarypower'}->{'plot'};
    $city->{'secondarypower'}->{'plot'} = rand_from_array( @{ $plotlist } )->{'content'};

    #select a power and a related subplot.
    my $powerlist=$xml_data->{'secondarypower'}->{'power'} ;
    my $power = rand_from_array( @{ $powerlist} );
    $city->{'secondarypower'}->{'power'} = rand_from_array( @{ $powerlist} )->{'type'};
    $city->{'secondarypower'}->{'subplot'} = rand_from_array( @{ $power->{'subplot'} } )->{'content'};
}

#####################################################
#
# Set Location - select a location and choose any
# applicable landmarks.
#
#####################################################
sub set_location {

    my $locationlist=$xml_data->{'locations'}->{'location'} ;
    my $location = rand_from_array( @{ $locationlist } );

    $city->{'location'}  = $location->{'description'};
    $city->{'landmarks'} = set_landmarks($location);
}

#####################################################
#
# Set Weather - As long as the location is above
# ground, set the forcast, clouds, precip and thunder.
# For all environments, loop through air, wind, and
# temperature and set them.
#
#####################################################
sub set_weather {
    $city->{'weather'} = {};
    #We don't need these underground...
    if ( $city->{'location'} ne 'Underground' ) {
         set_forecast();
         set_clouds();
         set_precip();
         set_thunder();
    }

    for my $facet (qw( temp air wind)) {
        # my god xml::simple is ugly.
        my $facetlist=$xml_data->{'weather'}->{$facet}->{'option'};
        $city->{'weather'}->{$facet} = rand_from_array( @{ $facetlist } );
    }
}


#####################################################
#
# Set Laws - Laws have three facets- enforcement, 
# trial and punishment. Select these from arrays.
#
#####################################################

sub set_laws {
    $city->{'laws'} = {};
    for my $facet (qw( enforcement trial punishment )) {
        my $facetlist=$xml_data->{'laws'}->{$facet}->{'option'};
        $city->{'laws'}->{$facet} = rand_from_array( @{ $facetlist } )->{'content'};
    }
}


#####################################################
#
# Set time - Set the time of day that you show up.
#
#####################################################
sub set_time {
    my $timelist=$xml_data->{'time'}->{'option'};
    $city->{'time'} = rand_from_array( @{ $timelist } );
}


#####################################################
#
# Generate Events - I don't like this method. It's 
# sloppy and ugly and smells bad. FIXME.
# should the size of the town affect the number of events?
# willis with a population of 35k may have more than the
# hard-coded config limit of 2.
#
#####################################################
sub generate_events {
    my $event_chance=$xml_data->{'events'}->{'chance'};
    my $limit=$xml_data->{'events'}->{'limit'};
    $city->{'events'}=[];
    my @events;

    for my $event (shuffle @{ $xml_data->{'events'}->{'event'} } ){
        if ($limit > 0 and &d(100) < $event_chance ){
            my $eventname=$event->{'type'};
            my $desc = rand_from_array( @{ $event->{'option'} } )->{'content'};
            push @{$city->{'events'}}, $desc.$eventname;
            $limit--;
        }
    }

}



#===================================================================
#===================================================================
#===================================================================
#===================================================================
#===================================================================

sub generate_districts{
    my $districtcount=5 + $city->{'size_modifier'};
    $city->{'districts'}={};
    for (my $i=0; $i<$districtcount ; $i++){
       my $district=rand_from_array(@{$xml_data->{'districts'}->{'option'}});
        if (defined $city->{'districts'}->{$district->{'type'}}){
            $city->{'districts'}->{$district->{'type'}}+=1;
        }else{
            $city->{'districts'}->{$district->{'type'}}=1;
        }
    }
}


sub generate_buildings{
    my $pop=$city->{'population'};
    
    $city->{'housing'}={};
    $city->{'housing'}->{'average'}     = floor($pop*.69/10);
    $city->{'housing'}->{'poor'}        = ceil ($pop*.30/20);
    $city->{'housing'}->{'elite'}       = floor($pop*.01/5);
    $city->{'housing'}->{'total'}       = $city->{'housing'}->{'average'} + $city->{'housing'}->{'poor'} + $city->{'housing'}->{'elite'};
    $city->{'housing'}->{'abandoned'}   = floor($city->{'housing'}->{'total'} *(10-$city->{'economy'} )/100 );

    $city->{'business'}={  'total'=>0  };

    my $businessestimate=($city->{'population'}/10)-$city->{'housing'}->{'total'};

    for my $business (  @{ $xml_data->{'buildings'}->{'building'} }   ){
        my $businessname=$business->{'content'};
        my $businesspercent=$business->{'percent'}+$city->{$business->{'type'}};
        if ($businesspercent <0){ $businesspercent=0; }
        if ($businesspercent >10){ $businesspercent=10; }

        my $businesscount=ceil $businessestimate*($businesspercent)/100;
        $city->{'business'}->{$businessname}={ 
                                                'origpercent'=>$business->{'percent'},
                                                'racepercent'=>$city->{$business->{'type'}},
                                                'percent' =>$businesspercent,
                                                'count'=> $businesscount,
                                             };
        $city->{'business'}->{'total'}+=$city->{'business'}->{$businessname}->{'count'};
    }
}


sub generate_streets{
    my $pop=$city->{'population'};
    my $timemodifier=$city->{'time'}->{'public_modifier'};
    my $sizemodifier=$city->{'size_modifier'};

    my $visiblepop=ceil($pop/(10+$sizemodifier) );

    if ($timemodifier >0){
        $visiblepop=$visiblepop*$timemodifier;
    }elsif ($timemodifier <0){
        $visiblepop=ceil sqrt($visiblepop/abs($timemodifier))+abs($timemodifier);
        if ($sizemodifier >0){
            $visiblepop*=$sizemodifier;
        }
    }
  
    if (defined $city->{'weather'}->{'precip'} ) {
        $visiblepop=ceil($visiblepop/2);
    }
    if (defined $city->{'weather'}->{'thunder'} ) {
        $visiblepop=ceil($visiblepop/2);
    }
    $visiblepop=ceil($visiblepop*$city->{'weather'}->{'temp'}->{'modifier'});

    $city->{'visible population'}=$visiblepop;
 
}


sub generate_markets {
    my @markets;
    for my $market (@{ $xml_data->{'markets'}->{'option'} } ){
        if (&d(100) < $market->{'chance'}){
            my $newmarket->{'type'}=$market->{'type'};
            $newmarket->{'name'}=$market->{'marketname'}.' '.$market->{'type'};
            if ( &d(100) <$market->{'secret'} ){
                $newmarket->{'secret'}='(secret)';
            }else{
                $newmarket->{'secret'}='';
            }
            if ( &d(100) > 50 ){
                my $marketoption=rand_from_array(@{$market->{'option'}});
                $newmarket->{'name'}= $marketoption->{'content'}.' '.$newmarket->{'name'};
            }
            push @markets, $newmarket;
        }
    }
    $city->{'markets'}=\@markets;
}

sub set_forecast {
    my @forecasttypes = @{ $xml_data->{'weather'}->{'forecast'}->{'option'} };
    $city->{'weather'}->{'forecast'} = rand_from_array(@forecasttypes)->{'content'};
} ## end sub set_forecast

sub set_clouds {
    my @cloudtypes = @{ $xml_data->{'weather'}->{'clouds'}->{'option'} };
    $city->{'weather'}->{'clouds'} = rand_from_array(@cloudtypes)->{'content'};
} ## end sub set_clouds

sub set_thunder {
    if ( &d(100) < $xml_data->{'weather'}->{'thunder'}->{'chance'} ) {
        my @thundertypes = @{ $xml_data->{'weather'}->{'thunder'}->{'option'} };
        $city->{'weather'}->{'thunder'} = rand_from_array(@thundertypes)->{'content'};
    }
} ## end sub set_thunder

sub set_precip {
    if ( &d(100) < $xml_data->{'weather'}->{'precip'}->{'chance'} ) {
        my $precip = rand_from_array( @{ $xml_data->{'weather'}->{'precip'}->{'option'} } );
        if ( defined $precip->{'type'} ) {
            $city->{'weather'}->{'precip'} = rand_from_array( @{ $precip->{'type'} } )->{'content'};
        }
        $city->{'weather'}->{'precip'} .= $precip->{'description'};
    } ## end if ( &d(100) < $xml_data...)
} ## end sub set_precip

sub set_landmarks {
    my ($location) = @_;
    my @landmarks;
    foreach my $landmark ( @{ $location->{landmarks} } ) {
        if ( &d(100) < $landmark->{'chance'} ) {
            my $landmarkname=$landmark->{'content'};
            if ( &d(100) < $xml_data->{'locations'}->{'landmarkdesc'}->{'chance'} ){
                my @landmarkdesc=@{ $xml_data->{'locations'}->{'landmarkdesc'}->{'option'} };
                $landmarkname = rand_from_array( @landmarkdesc )->{'content'}.' '.$landmarkname;
            }
            push @landmarks, $landmarkname;
        }
    }
    return \@landmarks;
} ## end sub set_landmarks

sub rand_from_array {
    my (@array) = @_;
    my $index = int( rand( scalar @array ) );
    return $array[$index];
}

sub add_race_features {
    my ( $race, $newrace ) = @_;
    $race->{'name'}      = $newrace->{'content'};
    $race->{'order'}     = $newrace->{'order'};
    $race->{'moral'}     = $newrace->{'moral'};
    $race->{'magic'}     = $newrace->{'magic'}; 
    $race->{'authority'} = $newrace->{'authority'};
    $race->{'economy'}   = $newrace->{'economy'};
    $race->{'education'} = $newrace->{'education'};
    $race->{'travel'}    = $newrace->{'travel'};
    $race->{'type'}      = $newrace->{'type'};
    return $race;
} ## end sub add_race_features


sub get_other_race {
    my ($type) = @_;
    my @races;
    for my $race ( shuffle @{ $xml_data->{'races'}->{'race'} } ) {
        if ( $race->{'type'} ne $type ) {
            return $race;
        }
    }
} ## end sub get_other_race

sub get_races {
    my ( $type, ) = @_;
    my @races;
    for my $race ( @{ $xml_data->{'races'}->{'race'} } ) {
        if ( $race->{'type'} eq $type or $type eq 'mixed' ) {
            push @races, $race;
        }
    }
    return shuffle @races;
} ## end sub get_races




#######################################################
# Presuming $items is an array of xml object with
# a min and max property, select the one that $roll
# best fits.
sub roll_from_array {
    my ( $roll, $items ) = @_;
    my $selected_item = $items->[0];
    for my $item (@$items) {
        if ( $item->{'min'} <= $roll and $item->{'max'} >= $roll ) {
            $selected_item = $item;
            last;
        }
    } ## end for my $item (@$items)
    return $selected_item;
} ## end sub roll_from_array

sub d {

#    d as in 1d6
    my ($die) = @_;
    return int( rand($die) );
} ## end sub d


####################################################################
####################################################################

sub print_markets_and_landmarks{
    my $places='';
    if (defined $city->{'markets'} or defined $city->{'landmarks'}){
        $places="<p>Within the city and the surrounding areas, you'll find:<p><ul>";
        
    }

    if (defined $city->{'markets'}){
        for my $market ( @{$city->{'markets'}}){
            $places.=sprintf "<li> %s %s</li>\n", $market->{'name'}, $market->{'secret'} ;
        }
    }
    if ( defined $city->{'landmarks'}){
        for my $landmark ( @{$city->{'landmarks'}}){
            $places.=sprintf "<li> a %s</li>\n", $landmark;
        }
    }
    if (defined $city->{markets} or defined $city->{'landmarks'}){
        $places.="</ul>"
    }
    return $places;
}
sub print_precip{
    my $precip='';
    if ( defined $city->{'weather'}->{'precip'} ){
        $precip="It is ".$city->{'weather'}->{'precip'}.". ";
    }
    if ( defined $city->{'weather'}->{'thunder'} ){
        $precip="There is thunder ".$city->{'weather'}->{'thunder'}.".";
    }
    if ( defined $city->{'weather'}->{'precip'} or defined $city->{'weather'}->{'thunder'} ){
        $precip.="\n";
    }
    return $precip;
}
#######################################################
# Pass in a $city structure, and print out a wonderful
# wall of text describing the city, sorta like a mad lib
sub describe_city{
    my $events= "<ul><li>".join( " </li><li>",@{$city->{'events'}})."</li></ul>";

    my $markets=print_markets_and_landmarks();

    my $precip=print_precip();

    my $population='';
    for my $race (reverse sort {$a->{'count'} <=> $b->{'count'}}  @{$city->{'races'}}){
        $population.=sprintf "<li> %5d  %13s ( %4s%%)</li>\n",$race->{'count'}, $race->{'name'}, $race->{'percent'};
    }

    my $clouds='';
    if ( defined $city->{'weather'}->{'clouds'} ){
        $clouds="the clouds are ".$city->{'weather'}->{'clouds'}.",";
    }
    my $economy=print_economy();
    my $housing=print_housing();
    my $districts=print_districts();

return <<EOF
        <!DOCTYPE html> 
        <html>
            <head>
                <title>City Generator: $city->{'name'} </title>
            </head>
            <style type='text/css'>
                ul{   
                    -moz-column-width:245px;
                    -webkit-column-width:245px ;
                } 
                #businesses ul{
                    width:600px;
                    -moz-column-width:150px;
                    -webkit-column-width:150px ;
                }
            </style>
            <body style='background-color:#44aa44;width:600px;padding:5px;margin:auto;'>
                    <header>
                        <a href='?cityid=$city->{'seed'}'><h1> $city->{'name'} ($city->{'seed'})</h1></a>
                        <p><b>$city->{'name'}</b> is a $city->{'description'} of around $city->{'population'}.</p>
                    </header>

                    <section id='location'>
                        <p>Located $city->{'location'}, this $city->{'poptype'} $city->{'size'} is ruled by $city->{'govtype'}->{'type'}, 
                            although there is a $city->{'secondarypower'}->{'power'} that $city->{'secondarypower'}->{'plot'} the leadership, 
                           while secretly $city->{'secondarypower'}->{'subplot'}.</p>
                        $markets
                        <h2> Current Events</h2>
                        <p>You arrive at the city around $city->{'time'}->{'content'}, where $clouds the air is $city->{'weather'}->{'air'}->{'content'} 
                            and the wind is $city->{'weather'}->{'wind'}->{'content'}. $precip</p>
                        <p>Upon arrival, around  $city->{'visible population'} citizens are wandering the $city->{'weather'}->{'temp'}->{'content'} $city->{'size'}. You see:
                        $events
                        </p>
                    </section>
                    <h2>Crime</h2>
                    <p>Law enforcement $city->{'laws'}->{'enforcement'}, punishments are mainly $city->{'laws'}->{'punishment'},
                    and convictions are $city->{'laws'}->{'trial'}.</p>
                    $economy 
                    $housing
                    $districts

                    <h2>Population</h2>
                        <p>The population is broken down as follows:</p>
                    <ul>
                    $population
                    </ul>
                
            </body>
        </html>
EOF
;

}

sub print_districts{
    my $content="<h2>Districts:</h2>\n";
    $content.="The city seems to be divided into the following district(s):\n<ul>";
    for my $district (sort keys %{ $city->{'districts'}}  ){
        $content.=sprintf "<li> %2s %-12s </li>\n",$city->{'districts'}->{$district},$district;
    }
    $content.="</ul>";


    return $content;
}

sub print_housing{
    my $housingcount=$city->{'housing'}->{'abandoned'}+$city->{'housing'}->{'average'}+$city->{'housing'}->{'poor'}+$city->{'housing'}->{'elite'};
    my $housing="<h2>Housing:</h2><ul>";
    $housing.=sprintf "<li>  Abandoned: %4s   </li>",  $city->{'housing'}->{'abandoned'};
    $housing.=sprintf "<li>  Average:   %4s   </li>",  $city->{'housing'}->{'average'};
    $housing.=sprintf "<li>  Poor:      %4s   </li>",$city->{'housing'}->{'poor'};
    $housing.=sprintf "<li>  Elite:     %4s   </li>",  $city->{'housing'}->{'elite'};
    $housing.="</ul>$housingcount total\n";
    return $housing;
}
sub print_economy{
    my $econ="<h2>Economy:</h2> The economy is ";
    if ($city->{'economy'} >0){ $econ.='strong. ';
    }elsif ($city->{'economy'} <0){ $econ.='weak. ';
    }else { $econ.='stable. ';    }
    $econ.="Magic is ";
    if ($city->{'magic'} >0){ $econ.='plentiful. ';
    }elsif ($city->{'magic'} <0){ $econ.='rare. ';
    }else { $econ.=' somewhat common. ';    }
    $econ.="Education is ";
    if ($city->{'education'} >0){ $econ.="high.\n ";
    }elsif ($city->{'education'} <0){ $econ.="low.\n ";
    }else { $econ.="somewhat common.\n ";    }
    if ($city->{'travel'} >0){ $econ.='This is a trade hub with many travelers. ';
    }elsif ($city->{'education'} <0){ $econ.='This is an economically isolated area with few travelers. ';}

    $econ.="You can find the following businesses:<ul id='businesses'>\n";
    my $businesstypes=$city->{'business'};
    my $businesscount=0;
    my $loop=0;
    for my $businessname (sort keys  %$businesstypes  ){
        if ($businessname ne 'total'){
            $econ.=sprintf "<li>  %4s %-15s</li>\n",$businesstypes->{$businessname}->{'count'},$businessname;
            $businesscount+=$businesstypes->{$businessname}->{'count'};
        }
        if ($loop++ %3 == 2){$econ.="\n";}
    }
    chomp $econ;
    $econ.="</ul>\n $businesscount total\n";
    return $econ;
}

sub set_seed{

    if (defined $q->param('cityid') and  $q->param('cityid')=~/(\d+)/){
        return $1;
    }else{
        return int rand(1000000);
    }
}
