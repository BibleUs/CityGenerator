#!/usr/bin/perl -wT

use strict;
use CGI;
use Data::Dumper;
use List::Util 'shuffle', 'min', 'max' ;
use POSIX;
use XML::Simple;
###################################################
# Using findbin to locate our new Location.pm module
use lib "lib/";
###################################################
#TODO it would be cool if it could rain frogs or potatoes
use Location 'build_location' ;


my $xml = new XML::Simple;

###########################################################
# Yes, this is sloppy. I am aware, but it's also unique.
# Unique, Ubiquitous Singletons.
our $q = CGI->new;
our $xml_data = $xml->XMLin(   "xml/locations.xml", ForceContent => 1, ForceArray  =>[]  );
our $names_data = $xml->XMLin(   "xml/npcnames.xml", ForceContent => 1, ForceArray  =>[]  );


#########################################################################
# First thing we need to do is establish a loc skeleton of information,
# then fill it in as needed by each subsection of the sample text.
#########################################################################
our $loc=build_location($q->param('seed'));


#########################################################################
# Now that $loc is fleshed out, we can print it..
#########################################################################

# Show loc XML
if (defined $q->param('type') and $q->param('type') eq 'xml' ){
    print $q->header( 'text/xml' );
    print "<?xml version='1.0'  encoding='ISO-8859-1' ?>\n";
    print XMLout($loc);
#show city data structure
}elsif (defined $q->param('type') and $q->param('type') eq 'dump' ){
    print $q->header( 'text/plain' );
    print Dumper $loc;
# run describe loc, but don't print it- useful for debugging
}elsif (defined $q->param('type') and $q->param('type') =~ /debug/ ){
    describe_loc();
# show the data.xml xml content
}elsif (defined $q->param('type') and $q->param('type') eq 'source' ){
    print $q->header( 'text/xml' );
    print "<?xml version='1.0'  encoding='ISO-8859-1' ?>\n";
    print XMLout($xml_data);
# and if it doesn't match those, do the regular printing of the loc.
}else {
    print $q->header;

    print describe_loc();
}

exit;
        
sub describe_loc {
    #my $content=describe_header();
    #$content.=describe_footer();
}




